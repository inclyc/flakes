zstyle ':completion:*' menu select
setopt correct
setopt nomatch
setopt notify
setopt nobeep

# Check whether or not we can attach to a tmux session
# should not attach tmux session if we are in these following cases:
# 1. no tmux executable
# 2. $PS1 is undefined
# 3. nested daemon environment
#	eliminate self loops since tmux then source this file (i.e. zshrc)
# 4. vscode environment
#	vscode built-in termianl is very small, which is not suitable for this
function _tmux_check_available() {
	command -v tmux &> /dev/null \
	&& [[ -n "$PS1" ]] \
	&& [[ ! "$TERM" =~ screen ]] \
	&& [[ ! "$TERM" =~ tmux ]] \
	&& [[ -z "$TMUX" ]] \
	&& [[ "$TERM_PROGRAM" != "vscode" ]] \
	&& true || false
}

# Check if tmux session given by $1 already exists.
# If true, attach to it, otherwise create and attach to a new session
function _tmux_new_or_attach() {
	tmux_session=$1
	if command tmux has-session -t $tmux_session; then
		command tmux attach -t $tmux_session
	else
		command tmux new -s $tmux_session
	fi
}

# Key bindings
bindkey -v '^?' backward-delete-char
bindkey '^R' history-incremental-search-backward

typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

[[ -n "${key[Up]}"   ]] && bindkey -- "${key[Up]}"   up-line-or-beginning-search
[[ -n "${key[Down]}" ]] && bindkey -- "${key[Down]}" down-line-or-beginning-search


# Use `jk` to escape insert mode
bindkey -M viins 'jk' vi-cmd-mode


# Command not found
command_not_found_handler () {

    # TODO: use "command not found" gettext translations

    # taken from http://www.linuxjournal.com/content/bash-command-not-found
    # - do not run when inside Midnight Commander or within a Pipe

    # - Also do not run if nix-locate is not available
    if [ -n "$MC_SID" ] || ! [ -t 1 ] || ! whence nix-locate 2>&1 >/dev/null; then
        >&2 echo "$1: command not found"
        return 127
    fi

    cmd=$1
    attrs=$(nix-locate --minimal --no-group --type x --type s --top-level --whole-name --at-root "/bin/$cmd")
    len=$(echo -n "$attrs" | grep -c "^")

    case $len in
        0)
            >&2 echo "$cmd: command not found"
            ;;
        *)
            >&2 cat <<EOF
$cmd: command not found
nix-locate says:
EOF

            # ensure we get each element of attrs
            # in a cross platform way
            counter=0
            while read attr; do
                >&2 echo "  $attr"
                counter=$((counter + 1))
                if ((counter >= 10)); then
                    >&2 echo "  ... and more ($len total)"
                    break
                fi
            done <<< "$attrs"
    esac
    return 127 # command not found should always exit with 127

}

export EDITOR="code --wait"
